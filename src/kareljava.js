/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var kareljava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[4,16],$V2=[1,18],$V3=[5,23],$V4=[2,68],$V5=[1,31],$V6=[1,36],$V7=[1,55],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,47],$Vc=[1,48],$Vd=[1,49],$Ve=[1,57],$Vf=[1,58],$Vg=[1,59],$Vh=[6,11,18,19,27,28,29,30,31,32,38,41,42],$Vi=[6,11,18,19,27,28,29,30,31,32,38,40,41,42],$Vj=[1,93],$Vk=[1,94],$Vl=[1,95],$Vm=[1,118],$Vn=[1,114],$Vo=[1,116],$Vp=[1,119],$Vq=[1,120],$Vr=[1,121],$Vs=[1,122],$Vt=[1,123],$Vu=[1,124],$Vv=[1,125],$Vw=[1,126],$Vx=[1,127],$Vy=[1,128],$Vz=[1,129],$VA=[1,130],$VB=[1,131],$VC=[1,132],$VD=[1,133],$VE=[1,134],$VF=[1,135],$VG=[1,136],$VH=[1,143],$VI=[9,43],$VJ=[1,144],$VK=[9,43,45],$VL=[8,9,43,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"CLASS":4,"PROG":5,"BEGIN":6,"def_list":7,"(":8,")":9,"block":10,"END":11,"EOF":12,"import_list":13,"expr_list":14,"import":15,"IMPORT":16,"package":17,";":18,"VAR":19,".":20,"*":21,"def":22,"DEF":23,"line":24,"var":25,"expr":26,"FORWARD":27,"LEFT":28,"PICKBUZZER":29,"LEAVEBUZZER":30,"HALT":31,"RET":32,"call":33,"cond":34,"loop":35,"repeat":36,"integer":37,"IF":38,"term":39,"ELSE":40,"WHILE":41,"REPEAT":42,"OR":43,"and_term":44,"AND":45,"not_term":46,"NOT":47,"clause":48,"IFZ":49,"bool_fun":50,"IFNFWALL":51,"IFFWALL":52,"IFNLWALL":53,"IFLWALL":54,"IFNRWALL":55,"IFRWALL":56,"IFWBUZZER":57,"IFNWBUZZER":58,"IFBBUZZER":59,"IFNBBUZZER":60,"IFW":61,"IFN":62,"IFE":63,"IFS":64,"IFNW":65,"IFNN":66,"IFNE":67,"IFNS":68,"NUM":69,"INC":70,"DEC":71,"$accept":0,"$end":1},
terminals_: {2:"error",4:"CLASS",5:"PROG",6:"BEGIN",8:"(",9:")",11:"END",12:"EOF",16:"IMPORT",18:";",19:"VAR",20:".",21:"*",23:"DEF",27:"FORWARD",28:"LEFT",29:"PICKBUZZER",30:"LEAVEBUZZER",31:"HALT",32:"RET",38:"IF",40:"ELSE",41:"WHILE",42:"REPEAT",43:"OR",45:"AND",47:"NOT",49:"IFZ",51:"IFNFWALL",52:"IFFWALL",53:"IFNLWALL",54:"IFLWALL",55:"IFNRWALL",56:"IFRWALL",57:"IFWBUZZER",58:"IFNWBUZZER",59:"IFBBUZZER",60:"IFNBBUZZER",61:"IFW",62:"IFN",63:"IFE",64:"IFS",65:"IFNW",66:"IFNN",67:"IFNE",68:"IFNS",69:"NUM",70:"INC",71:"DEC"},
productions_: [0,[3,10],[3,9],[3,11],[3,10],[10,3],[13,2],[13,1],[15,3],[17,3],[17,3],[7,2],[7,1],[22,6],[22,7],[14,2],[14,1],[26,4],[26,4],[26,4],[26,4],[26,4],[26,4],[26,2],[26,1],[26,1],[26,1],[26,1],[26,1],[33,3],[33,4],[34,6],[34,8],[35,6],[36,6],[39,3],[39,1],[44,3],[44,1],[46,2],[46,1],[48,4],[48,1],[48,3],[48,3],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[37,1],[37,1],[37,4],[37,4],[25,1],[24,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return validate([], $$[$0-6], $$[$0-2].concat([['LINE', yylineno], ['HALT']]), yy); 
break;
case 2:
 return validate([], [], $$[$0-2].concat([['LINE', yylineno], ['HALT']]), yy); 
break;
case 3:
 return validate($$[$0-10], $$[$0-6], $$[$0-2].concat([['LINE', yylineno], ['HALT']]), yy); 
break;
case 4:
 return validate($$[$0-9], [], $$[$0-2].concat([['LINE', yylineno], ['HALT']]), yy); 
break;
case 5: case 23: case 44:
 this.$ = $$[$0-1]; 
break;
case 6: case 11: case 15:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 7: case 12: case 16: case 24: case 25: case 26: case 27: case 36: case 38: case 40: case 42:
 this.$ = $$[$0]; 
break;
case 8:
 this.$ = [[$$[$0-1]]]; 
break;
case 9:

    this.$= $$[$0-2]+"."+$$[$0];
  
break;
case 10:

    this.$= $$[$0-2]+".*";
  
break;
case 13:
 
      this._$.first_line = _$[$0-5].first_line;
      this._$.first_column = _$[$0-5].first_column;
      this._$.last_line = _$[$0-3].last_line;
      this._$.last_column = _$[$0-3].last_column;
      this.$ = [[$$[$0-3], $$[$0-4].concat($$[$0]).concat([['RET']]), 1, this._$]];
       
break;
case 14:

      this._$.first_line = _$[$0-6].first_line;
      this._$.first_column = _$[$0-6].first_column;
      this._$.last_line = _$[$0-4].last_line;
      this._$.last_column = _$[$0-4].last_column;
    	var result = $$[$0-5].concat($$[$0]).concat([['RET']]);
    	for (var i = 0; i < result.length; i++) {
    		if (result[i][0] == 'PARAM') {
    			if (result[i][1] == $$[$0-2]) {
    				result[i][1] = 0;
    			} else {
						yy.parser.parseError("Unknown variable: " + $$[$0-2], {
							text: result[i][1],
							line: yylineno,
              loc:result[i][2]
						});
    			}
    		}
    	}
    	this.$ = [[$$[$0-4], result, 2,this._$]];
    
break;
case 17:
 this.$ = [['LINE', yylineno], ['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND'], ['NOT'], ['EZ', 'WALL'], ['FORWARD']]; 
break;
case 18:
 this.$ = [['LINE', yylineno], ['LEFT']]; 
break;
case 19:
 this.$ = [['LINE', yylineno], ['WORLDBUZZERS'], ['EZ', 'WORLDUNDERFLOW'], ['PICKBUZZER']]; 
break;
case 20:
 this.$ = [['LINE', yylineno], ['BAGBUZZERS'], ['EZ', 'BAGUNDERFLOW'], ['LEAVEBUZZER']]; 
break;
case 21:
 this.$ = [['LINE', yylineno], ['HALT']]; 
break;
case 22:
 this.$ = [['LINE', yylineno], ['RET']]; 
break;
case 28:
 this.$ = []; 
break;
case 29:
 
      
      var loc = {
        first_line: _$[$0-1].first_line,
        first_column: _$[$0-1].first_column,
        last_line: _$[$0].last_line,
        last_column: _$[$0].last_column,
      };
      this.$ = [['LINE', yylineno], ['LOAD', 0], ['CALL', $$[$0-2], 1, _$[$0-2], loc], ['LINE', yylineno]]; 
    
break;
case 30:
 
      this._$.first_column = _$[$0-3].first_column;
      this._$.first_line = _$[$0-3].first_line;
      this._$.last_column = _$[$0].last_column;
      this._$.last_line = _$[$0].last_line;
      ;
      this.$ = [['LINE', yylineno]].concat($$[$0-1]).concat([['CALL', $$[$0-3], 2, _$[$0-3], _$[$0-1]], ['LINE', yylineno]]); 
    
break;
case 31:
 this.$ = $$[$0-4].concat($$[$0-2]).concat([['JZ', $$[$0].length]]).concat($$[$0]); 
break;
case 32:
 this.$ = $$[$0-6].concat($$[$0-4]).concat([['JZ', 1 + $$[$0-2].length]]).concat($$[$0-2]).concat([['JMP', $$[$0].length]]).concat($$[$0]); 
break;
case 33:
 this.$ = $$[$0-4].concat($$[$0-2]).concat([['JZ', 1 + $$[$0].length]]).concat($$[$0]).concat([['JMP', -1 -($$[$0-2].length + $$[$0].length + 2)]]); 
break;
case 34:
 this.$ = $$[$0-4].concat($$[$0-2]).concat([['DUP'], ['LOAD', 0], ['EQ'], ['NOT'], ['JZ', $$[$0].length + 2]]).concat($$[$0]).concat([['DEC'], ['JMP', -1 -($$[$0].length + 6)], ['POP']]); 
break;
case 35:
 this.$ = $$[$0-2].concat($$[$0]).concat([['OR']]); 
break;
case 37:
 this.$ = $$[$0-2].concat($$[$0]).concat([['AND']]); 
break;
case 39:
 this.$ = $$[$0].concat([['NOT']]); 
break;
case 41:
 this.$ = $$[$0-1].concat([['NOT']]); 
break;
case 43:
 this.$ = $$[$0-2]; 
break;
case 45:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 46:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND']]; 
break;
case 47:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTL'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 48:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTL'], ['MASK'], ['AND']]; 
break;
case 49:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTR'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 50:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTR'], ['MASK'], ['AND']]; 
break;
case 51:
 this.$ = [['WORLDBUZZERS'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 52:
 this.$ = [['WORLDBUZZERS'], ['NOT']]; 
break;
case 53:
 this.$ = [['BAGBUZZERS'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 54:
 this.$ = [['BAGBUZZERS'], ['NOT']]; 
break;
case 55:
 this.$ = [['ORIENTATION'], ['LOAD', 0], ['EQ']]; 
break;
case 56:
 this.$ = [['ORIENTATION'], ['LOAD', 1], ['EQ']]; 
break;
case 57:
 this.$ = [['ORIENTATION'], ['LOAD', 2], ['EQ']]; 
break;
case 58:
 this.$ = [['ORIENTATION'], ['LOAD', 3], ['EQ']]; 
break;
case 59:
 this.$ = [['ORIENTATION'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 60:
 this.$ = [['ORIENTATION'], ['LOAD', 1], ['EQ'], ['NOT']]; 
break;
case 61:
 this.$ = [['ORIENTATION'], ['LOAD', 2], ['EQ'], ['NOT']]; 
break;
case 62:
 this.$ = [['ORIENTATION'], ['LOAD', 3], ['EQ'], ['NOT']]; 
break;
case 63:
 this.$ = [['PARAM', $$[$0], _$[$0]]]; 
break;
case 64:
 this.$ = [['LOAD', parseInt(yytext)]]; 
break;
case 65:
 this.$ = $$[$0-1].concat([['INC']]); 
break;
case 66:
 this.$ = $$[$0-1].concat([['DEC']]); 
break;
case 67:
 this.$ = yytext; 
break;
case 68:
 this.$ = [['LINE', yylineno]]; 
break;
}
},
table: [{3:1,4:[1,2],13:3,15:4,16:$V0},{1:[3]},{5:[1,6]},{4:[1,7],15:8,16:$V0},o($V1,[2,7]),{17:9,19:[1,10]},{6:[1,11]},{5:[1,12]},o($V1,[2,6]),{18:[1,13]},{20:[1,14]},{5:[1,16],7:15,22:17,23:$V2},{6:[1,19]},o($V1,[2,8]),{19:[1,20],21:[1,21]},{5:[1,22],22:23,23:$V2},{8:[1,24]},o($V3,[2,12]),{19:$V4,24:25},{5:[1,27],7:26,22:17,23:$V2},{18:[2,9]},{18:[2,10]},{8:[1,28]},o($V3,[2,11]),{9:[1,29]},{19:$V5,25:30},{5:[1,32],22:23,23:$V2},{8:[1,33]},{9:[1,34]},{6:$V6,10:35},{8:[1,37]},o([8,9],[2,67]),{8:[1,38]},{9:[1,39]},{6:$V6,10:40},{11:[1,41]},{6:$V6,10:54,14:42,18:$V7,19:$V5,25:56,26:43,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:50,34:51,35:52,36:53,38:$Ve,41:$Vf,42:$Vg},{9:[1,60],19:$V5,25:61},{9:[1,62]},{6:$V6,10:63},{11:[1,64]},{12:[1,65]},{6:$V6,10:54,11:[1,66],18:$V7,19:$V5,25:56,26:67,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:50,34:51,35:52,36:53,38:$Ve,41:$Vf,42:$Vg},o($Vh,[2,16]),{8:[1,68]},{8:[1,69]},{8:[1,70]},{8:[1,71]},{8:[1,72]},{8:[1,73]},{18:[1,74]},o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,27]),o($Vi,[2,28]),{8:[1,75]},{8:$V4,24:76},{8:$V4,24:77},{8:$V4,24:78},{6:$V6,10:79},{9:[1,80]},{6:$V6,10:81},{11:[1,82]},{12:[1,83]},{1:[2,2]},o([5,6,11,18,19,23,27,28,29,30,31,32,38,40,41,42],[2,5]),o($Vh,[2,15]),{9:[1,84]},{9:[1,85]},{9:[1,86]},{9:[1,87]},{9:[1,88]},{9:[1,89]},o($Vi,[2,23]),{9:[1,90],19:$V5,25:92,37:91,69:$Vj,70:$Vk,71:$Vl},{8:[1,96]},{8:[1,97]},{8:[1,98]},o($V3,[2,13]),{6:$V6,10:99},{11:[1,100]},{12:[1,101]},{1:[2,1]},{18:[1,102]},{18:[1,103]},{18:[1,104]},{18:[1,105]},{18:[1,106]},{18:[1,107]},{18:[2,29]},{9:[1,108]},{9:[2,63]},{9:[2,64]},{8:[1,109]},{8:[1,110]},{8:$Vm,39:111,44:112,46:113,47:$Vn,48:115,49:$Vo,50:117,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{8:$Vm,39:137,44:112,46:113,47:$Vn,48:115,49:$Vo,50:117,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{19:$V5,25:92,37:138,69:$Vj,70:$Vk,71:$Vl},o($V3,[2,14]),{12:[1,139]},{1:[2,4]},o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),{18:[2,30]},{19:$V5,25:92,37:140,69:$Vj,70:$Vk,71:$Vl},{19:$V5,25:92,37:141,69:$Vj,70:$Vk,71:$Vl},{9:[1,142],43:$VH},o($VI,[2,36],{45:$VJ}),o($VK,[2,38]),{8:$Vm,48:145,49:$Vo,50:117,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},o($VK,[2,40]),{8:[1,146]},o($VK,[2,42],{8:[1,147]}),{8:$Vm,39:148,44:112,46:113,47:$Vn,48:115,49:$Vo,50:117,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},o($VL,[2,45]),o($VL,[2,46]),o($VL,[2,47]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),o($VL,[2,53]),o($VL,[2,54]),o($VL,[2,55]),o($VL,[2,56]),o($VL,[2,57]),o($VL,[2,58]),o($VL,[2,59]),o($VL,[2,60]),o($VL,[2,61]),o($VL,[2,62]),{9:[1,149],43:$VH},{9:[1,150]},{1:[2,3]},{9:[1,151]},{9:[1,152]},{6:$V6,10:54,18:$V7,19:$V5,25:56,26:153,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:50,34:51,35:52,36:53,38:$Ve,41:$Vf,42:$Vg},{8:$Vm,44:154,46:113,47:$Vn,48:115,49:$Vo,50:117,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},{8:$Vm,46:155,47:$Vn,48:115,49:$Vo,50:117,51:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE,67:$VF,68:$VG},o($VK,[2,39]),{19:$V5,25:92,37:156,69:$Vj,70:$Vk,71:$Vl},{9:[1,157]},{9:[1,158],43:$VH},{6:$V6,10:54,18:$V7,19:$V5,25:56,26:159,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:50,34:51,35:52,36:53,38:$Ve,41:$Vf,42:$Vg},{6:$V6,10:54,18:$V7,19:$V5,25:56,26:160,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:50,34:51,35:52,36:53,38:$Ve,41:$Vf,42:$Vg},{9:[2,65]},{9:[2,66]},o($Vh,[2,31],{40:[1,161]}),o($VI,[2,35],{45:$VJ}),o($VK,[2,37]),{9:[1,162]},o($VK,[2,43]),o($VK,[2,44]),o($Vi,[2,33]),o($Vi,[2,34]),{6:$V6,10:54,18:$V7,19:$V5,25:56,26:163,27:$V8,28:$V9,29:$Va,30:$Vb,31:$Vc,32:$Vd,33:50,34:51,35:52,36:53,38:$Ve,41:$Vf,42:$Vg},o($VK,[2,41]),o($Vi,[2,32])],
defaultActions: {20:[2,9],21:[2,10],65:[2,2],83:[2,1],90:[2,29],92:[2,63],93:[2,64],101:[2,4],108:[2,30],139:[2,3],151:[2,65],152:[2,66]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    // _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc, // Implement fix: https://github.com/zaach/jison/pull/356
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const rekarelModules= [
  "*",
];

function validate(packages, function_list, program, yy) {

  const flags = new Set();
  for (const pack of packages) {
    const namespace = pack[0].split(".")[0];
    const mod = pack[0].split(".")[1];
    if (namespace != "rekarel") {
      
      yy.parser.parseError("Package not recognized: " + pack[0])
      return; //TODO: Throw exception
    }
    if (!rekarelModules.includes(mod)) {
      yy.parser.parseError("Rekarel has no module: " + mod)
      return;
    }
    flags.add(pack[0]);
  }
  function checkReKarelFlag(flag) {
    if (flags.has("*")) return true;
    return flag.has(flag);
  }

	var functions = {};
	var prototypes = {};

	for (var i = 0; i < function_list.length; i++) {
		if (functions[function_list[i][0]]) {
			yy.parser.parseError("Function redefinition: " + function_list[i][0], {
				text: function_list[i][0],
				line: function_list[i][1][0][1],
        loc: function_list[i][3]
			});
		}

		functions[function_list[i][0]] = program.length;
		prototypes[function_list[i][0]] = function_list[i][2];
		program = program.concat(function_list[i][1]);
	}

	var current_line = 1;
	for (var i = 0; i < program.length; i++) {
		if (program[i][0] == 'LINE') {
			current_line = program[i][1];
		} else if (program[i][0] == 'CALL') {
			if (!functions[program[i][1]] || !prototypes[program[i][1]]) {
				yy.parser.parseError("Undefined function: " + program[i][1], {
					text: program[i][1],
					line: current_line,
          loc: program[i][3]
				});
			} else if (prototypes[program[i][1]] != program[i][2]) {
				yy.parser.parseError("Function parameter mismatch: " + program[i][1], {
					text: program[i][1],
					line: current_line,
          loc: program[i][4],
          parameters: program[i][2],
				});
			}

			program[i][2] = program[i][1];
			program[i][1] = functions[program[i][1]];
      // Remove loc data which is only for error parsing
      program[i].pop();
      program[i].pop(); 
		} else if (program[i][0] == 'PARAM') {
      if (program[i][1] != 0) {
        yy.parser.parseError("Unknown variable: " + program[i][1], {
          text: program[i][1],
          line: current_line,
          loc: program[i][2]
        });
      } else {
        program[i].pop();
      }
		}
	}

	return program;
}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:/* ignore */
break;
case 2:/* ignore */
break;
case 3: return 4; 
break;
case 4: return 5; 
break;
case 5: return 23; 
break;
case 6: return 16; 
break;
case 7: return 23; 
break;
case 8: return 32; 
break;
case 9: return 31; 
break;
case 10: return 28; 
break;
case 11: return 27; 
break;
case 12: return 29; 
break;
case 13: return 30; 
break;
case 14: return 41; 
break;
case 15: return 42; 
break;
case 16: return 71; 
break;
case 17: return 70; 
break;
case 18: return 49; 
break;
case 19: return 51; 
break;
case 20: return 52; 
break;
case 21: return 53; 
break;
case 22: return 54; 
break;
case 23: return 55; 
break;
case 24: return 56; 
break;
case 25: return 57; 
break;
case 26: return 58; 
break;
case 27: return 59; 
break;
case 28: return 60; 
break;
case 29: return 62; 
break;
case 30: return 64; 
break;
case 31: return 63; 
break;
case 32: return 61; 
break;
case 33: return 66; 
break;
case 34: return 68; 
break;
case 35: return 67; 
break;
case 36: return 65; 
break;
case 37: return 40; 
break;
case 38: return 38; 
break;
case 39: return 47; 
break;
case 40: return 43; 
break;
case 41: return 45; 
break;
case 42: return 45; 
break;
case 43: return 8; 
break;
case 44: return 9; 
break;
case 45: return 6; 
break;
case 46: return 11; 
break;
case 47: return 18; 
break;
case 48: return 20; 
break;
case 49: return 21; 
break;
case 50: return 69; 
break;
case 51: return 19; 
break;
case 52: return 12; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*(?:[^*]|\*(?!\/))*\*\/)/,/^(?:class\b)/,/^(?:program\b)/,/^(?:define\b)/,/^(?:import\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:turnoff\b)/,/^(?:turnleft\b)/,/^(?:move\b)/,/^(?:pickbeeper\b)/,/^(?:putbeeper\b)/,/^(?:while\b)/,/^(?:iterate\b)/,/^(?:pred\b)/,/^(?:succ\b)/,/^(?:iszero\b)/,/^(?:frontIsClear\b)/,/^(?:frontIsBlocked\b)/,/^(?:leftIsClear\b)/,/^(?:leftIsBlocked\b)/,/^(?:rightIsClear\b)/,/^(?:rightIsBlocked\b)/,/^(?:nextToABeeper\b)/,/^(?:notNextToABeeper\b)/,/^(?:anyBeepersInBeeperBag\b)/,/^(?:noBeepersInBeeperBag\b)/,/^(?:facingNorth\b)/,/^(?:facingSouth\b)/,/^(?:facingEast\b)/,/^(?:facingWest\b)/,/^(?:notFacingNorth\b)/,/^(?:notFacingSouth\b)/,/^(?:notFacingEast\b)/,/^(?:notFacingWest\b)/,/^(?:else\b)/,/^(?:if\b)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:\.)/,/^(?:\*)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
function javaParser() {
    return kareljava.parse.apply(kareljava, arguments);
}
export {kareljava, javaParser }
