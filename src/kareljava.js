/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var kareljava = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[4,16],$V2=[1,19],$V3=[1,20],$V4=[1,21],$V5=[5,26,27,28],$V6=[2,77],$V7=[1,34],$V8=[1,39],$V9=[1,58],$Va=[1,47],$Vb=[1,48],$Vc=[1,49],$Vd=[1,50],$Ve=[1,51],$Vf=[1,59],$Vg=[1,61],$Vh=[1,62],$Vi=[1,63],$Vj=[6,11,18,19,30,31,32,33,34,40,42,45,46],$Vk=[6,11,18,19,30,31,32,33,34,40,42,44,45,46],$Vl=[1,83],$Vm=[1,84],$Vn=[1,86],$Vo=[1,87],$Vp=[9,18,75],$Vq=[1,123],$Vr=[1,122],$Vs=[1,125],$Vt=[1,127],$Vu=[1,128],$Vv=[1,129],$Vw=[1,130],$Vx=[1,131],$Vy=[1,132],$Vz=[1,133],$VA=[1,134],$VB=[1,135],$VC=[1,136],$VD=[1,137],$VE=[1,138],$VF=[1,139],$VG=[1,140],$VH=[1,141],$VI=[1,142],$VJ=[1,143],$VK=[1,144],$VL=[1,153],$VM=[1,154],$VN=[9,48,49],$VO=[8,9,48,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"CLASS":4,"PROG":5,"BEGIN":6,"def_list":7,"(":8,")":9,"block":10,"END":11,"EOF":12,"import_list":13,"expr_list":14,"import":15,"IMPORT":16,"package":17,";":18,"VAR":19,".":20,"*":21,"def":22,"funct_type":23,"line":24,"var":25,"DEF":26,"INT":27,"BOOL":28,"expr":29,"FORWARD":30,"LEFT":31,"PICKBUZZER":32,"LEAVEBUZZER":33,"HALT":34,"return":35,"call":36,"cond":37,"loop":38,"repeat":39,"RET":40,"integer":41,"IF":42,"bool_term":43,"ELSE":44,"WHILE":45,"REPEAT":46,"term":47,"OR":48,"AND":49,"NOT":50,"clause":51,"IFZ":52,"bool_fun":53,"IFNFWALL":54,"IFFWALL":55,"IFNLWALL":56,"IFLWALL":57,"IFNRWALL":58,"IFRWALL":59,"IFWBUZZER":60,"IFNWBUZZER":61,"IFBBUZZER":62,"IFNBBUZZER":63,"IFW":64,"IFN":65,"IFE":66,"IFS":67,"IFNW":68,"IFNN":69,"IFNE":70,"IFNS":71,"int_literal":72,"INC":73,"DEC":74,",":75,"NUM":76,"$accept":0,"$end":1},
terminals_: {2:"error",4:"CLASS",5:"PROG",6:"BEGIN",8:"(",9:")",11:"END",12:"EOF",16:"IMPORT",18:";",19:"VAR",20:".",21:"*",26:"DEF",27:"INT",28:"BOOL",30:"FORWARD",31:"LEFT",32:"PICKBUZZER",33:"LEAVEBUZZER",34:"HALT",40:"RET",42:"IF",44:"ELSE",45:"WHILE",46:"REPEAT",48:"OR",49:"AND",50:"NOT",52:"IFZ",54:"IFNFWALL",55:"IFFWALL",56:"IFNLWALL",57:"IFLWALL",58:"IFNRWALL",59:"IFRWALL",60:"IFWBUZZER",61:"IFNWBUZZER",62:"IFBBUZZER",63:"IFNBBUZZER",64:"IFW",65:"IFN",66:"IFE",67:"IFS",68:"IFNW",69:"IFNN",70:"IFNE",71:"IFNS",73:"INC",74:"DEC",75:",",76:"NUM"},
productions_: [0,[3,10],[3,9],[3,11],[3,10],[10,3],[13,2],[13,1],[15,3],[17,3],[17,3],[7,2],[7,1],[22,6],[22,7],[23,1],[23,1],[23,1],[14,2],[14,1],[29,4],[29,4],[29,4],[29,4],[29,4],[29,2],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[35,3],[35,1],[35,2],[36,3],[36,4],[37,6],[37,8],[38,6],[39,6],[47,3],[47,3],[47,2],[47,3],[47,1],[43,1],[51,4],[51,1],[51,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[41,1],[41,1],[41,4],[41,4],[41,6],[41,6],[41,1],[72,1],[25,1],[24,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
      resetCompiler();
      return {
        compiler: COMPILER,
        language: LANG,
        variablesCanBeFunctions: VarsAsFuncs,
        requieresFunctionPrototypes: reqsPrototypes,
        packages: [],
        functions: $$[$0-6],
        program: $$[$0-2].concat([['LINE', yylineno], ['HALT']]),
        yy:yy,
      } 
    
break;
case 2:
  
      resetCompiler();
      return {
        compiler: COMPILER,
        language: LANG,
        requieresFunctionPrototypes: reqsPrototypes,
        variablesCanBeFunctions: VarsAsFuncs,
        packages: [],
        functions: [],
        program: $$[$0-2].concat([['LINE', yylineno], ['HALT']]),
        yy:yy,
      }
    
break;
case 3:
  
      resetCompiler();
      return {
        compiler: COMPILER,
        language: LANG,
        requieresFunctionPrototypes: reqsPrototypes,
        variablesCanBeFunctions: VarsAsFuncs,
        packages: $$[$0-10],
        functions: $$[$0-6],
        program: $$[$0-2].concat([['LINE', yylineno], ['HALT']]),
        yy:yy,
      }
    
break;
case 4:
  
      resetCompiler();
      return {
        compiler: COMPILER,
        language: LANG,
        packages: $$[$0-9],
        requieresFunctionPrototypes: reqsPrototypes,
        variablesCanBeFunctions: VarsAsFuncs,
        functions: [],
        program: $$[$0-2].concat([['LINE', yylineno], ['HALT']]),
        yy:yy,
      }
    
break;
case 5: case 25: case 26: case 44:
 this.$ = $$[$0-1]; 
break;
case 6: case 11: case 18:
 this.$ = $$[$0-1].concat($$[$0]); 
break;
case 7: case 12: case 19: case 27: case 28: case 29: case 30: case 45:
 this.$ = $$[$0]; 
break;
case 8:
 this.$ = [[$$[$0-1]]]; 
break;
case 9:

    this.$= $$[$0-2]+"."+$$[$0];
  
break;
case 10:

    this.$= $$[$0-2]+".*";
  
break;
case 13:
 
      this._$.first_line = _$[$0-5].first_line;
      this._$.first_column = _$[$0-5].first_column;
      this._$.last_line = _$[$0-3].last_line;
      this._$.last_column = _$[$0-3].last_column;
      this.$ = [{
        name: $$[$0-3], 
        code: $$[$0-4].concat($$[$0]).concat([['RET', '__DEFAULT', _$[$0-5]]]),  //FIXME: This should be in the closing bracket of block
        params: [], 
        loc: this._$, 
        returnType: $$[$0-5]
      }];
    
break;
case 14:

      this._$.first_line = _$[$0-6].first_line;
      this._$.first_column = _$[$0-6].first_column;
      this._$.last_line = _$[$0-4].last_line;
      this._$.last_column = _$[$0-4].last_column;
    	let result = $$[$0-5].concat($$[$0]).concat([['RET', '__DEFAULT', _$[$0-6]]]);
      let params = [$$[$0-2]];
    	this.$ = [{
        name: $$[$0-4], 
        code: result, 
        params: params,
        loc: this._$, 
        returnType: $$[$0-6]
      }];
    
break;
case 15:
 this.$ = "VOID"; 
break;
case 16:
 this.$ = "INT"; 
break;
case 17:
 this.$ = "BOOL"; 
break;
case 20:
 this.$ = [['LINE', yylineno], ['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND'], ['NOT'], ['EZ', 'WALL'], ['FORWARD']]; 
break;
case 21:
 this.$ = [['LINE', yylineno], ['LEFT']]; 
break;
case 22:
 this.$ = [['LINE', yylineno], ['WORLDBUZZERS'], ['EZ', 'WORLDUNDERFLOW'], ['PICKBUZZER']]; 
break;
case 23:
 this.$ = [['LINE', yylineno], ['BAGBUZZERS'], ['EZ', 'BAGUNDERFLOW'], ['LEAVEBUZZER']]; 
break;
case 24:
 this.$ = [['LINE', yylineno], ['HALT']]; 
break;
case 31:
 this.$ = []; 
break;
case 32:
 this.$ = [['LINE', yylineno], ['RET', 'VOID', _$[$0-2]]]; 
break;
case 33:
 this.$ = [['LINE', yylineno], ['RET', 'VOID', _$[$0]]]; 
break;
case 34:
 this.$ = [['LINE', yylineno], ...$$[$0], ['SRET'], [ 'RET', 'INT', _$[$0-1]]]; 
break;
case 35:
 
      
      var loc = {
        first_line: _$[$0-1].first_line,
        first_column: _$[$0-1].first_column,
        last_line: _$[$0].last_line,
        last_column: _$[$0].last_column,
      };
      this.$ = [
        ['LINE', yylineno], 
        ['LOAD', 0], 
        [
          'CALL', 
          {
            target: $$[$0-2], 
            argCount: 1, 
            nameLoc: _$[$0-2], 
            argLoc: loc
          }
        ], 
        ['LINE', yylineno]
      ]; 
    
break;
case 36:
 
      this._$.first_column = _$[$0-3].first_column;
      this._$.first_line = _$[$0-3].first_line;
      this._$.last_column = _$[$0].last_column;
      this._$.last_line = _$[$0].last_line;
      this.$ = [
        ['LINE', yylineno],
        ...$$[$0-1],
        [
          'CALL',
          {
            target:$$[$0-3], 
            argCount:2, 
            nameLoc: _$[$0-3], 
            argLoc: _$[$0-1]
          } 
        ], 
        ['LINE', yylineno]
      ]; 
    
break;
case 37:
 
      const skipTag = UniqueTag('iskip');
      this.$ = [
        ...$$[$0-4], 
        ...$$[$0-2], 
        ['TJZ', skipTag],
        ...$$[$0],
        ['TAG', skipTag ],
      ];
    
break;
case 38:
 
      const toElse = UniqueTag('ielse');
      const skipElse = UniqueTag('iskipelse');
      this.$ = [
        ...$$[$0-6], 
        ...$$[$0-4], 
        ['TJZ', toElse ], 
        ...$$[$0-2], 
        ['TJMP',  skipElse], 
        ['TAG', toElse  ],
        ...$$[$0],        
        ['TAG', skipElse ],
      ]; 
    
break;
case 39:
 
      const repeatTag = UniqueTag('lrepeat');
      const endTag = UniqueTag('lend');
      this.$ = [
        ['TAG',  repeatTag ],
        ...$$[$0-4], 
        ...$$[$0-2], 
        ['TJZ',  endTag], 
        ...$$[$0], 
        ['TJMP', repeatTag],
        ['TAG', endTag],
      ];
    
break;
case 40:
 
      const repeatEnd = UniqueTag('rend');
      const repeatLoop = UniqueTag('rloop');
      this.$ = [ 
        ...$$[$0-4],
        ...$$[$0-2],
        ['TAG', repeatLoop],
        ['DUP'],
        ['LOAD', 0], 
        ['EQ'], 
        ['NOT'], 
        ['TJZ', repeatEnd],
        ...$$[$0],
        ['DEC', 1], 
        ['TJMP', repeatLoop], 
        ['TAG', repeatEnd],
        ['POP'], 
      ]; 
    
break;
case 41:
 this.$ = {
        left: $$[$0-2], 
        right: $$[$0], 
        operation: "OR", 
        dataType:"BOOL" 
      }; 
break;
case 42:
 
      this.$ = {
        left: $$[$0-2], 
        right: $$[$0], 
        operation: "AND", 
        dataType:"BOOL"
      };
    
break;
case 43:
 
      this.$ = {
        term: $$[$0],       
        operation: "NOT",
        dataType:"BOOL" 
      };
      
break;
case 46:
 
      this.$ = [[
        'TERM', 
        {
          term:$$[$0], 
          operation: 'PASS',
          dataType: 'BOOL'
        }    
      ]];
    
break;
case 47:
 
      this.$ = {
        operation: "ATOM",
        instructions: $$[$0-1].concat([['NOT']]),
        dataType: "BOOL"
      };
    
break;
case 48:
 
      this.$ = {
        operation: "ATOM",
        instructions: $$[$0],
        dataType: "BOOL"
      };
    
break;
case 49:
 
      this.$ = {
        operation: "ATOM",
        instructions: $$[$0-2],
        dataType: "BOOL"
      };
    
break;
case 50:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 51:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['MASK'], ['AND']]; 
break;
case 52:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTL'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 53:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTL'], ['MASK'], ['AND']]; 
break;
case 54:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTR'], ['MASK'], ['AND'], ['NOT']]; 
break;
case 55:
 this.$ = [['WORLDWALLS'], ['ORIENTATION'], ['ROTR'], ['MASK'], ['AND']]; 
break;
case 56:
 this.$ = [['WORLDBUZZERS'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 57:
 this.$ = [['WORLDBUZZERS'], ['NOT']]; 
break;
case 58:
 this.$ = [['BAGBUZZERS'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 59:
 this.$ = [['BAGBUZZERS'], ['NOT']]; 
break;
case 60:
 this.$ = [['ORIENTATION'], ['LOAD', 0], ['EQ']]; 
break;
case 61:
 this.$ = [['ORIENTATION'], ['LOAD', 1], ['EQ']]; 
break;
case 62:
 this.$ = [['ORIENTATION'], ['LOAD', 2], ['EQ']]; 
break;
case 63:
 this.$ = [['ORIENTATION'], ['LOAD', 3], ['EQ']]; 
break;
case 64:
 this.$ = [['ORIENTATION'], ['LOAD', 0], ['EQ'], ['NOT']]; 
break;
case 65:
 this.$ = [['ORIENTATION'], ['LOAD', 1], ['EQ'], ['NOT']]; 
break;
case 66:
 this.$ = [['ORIENTATION'], ['LOAD', 2], ['EQ'], ['NOT']]; 
break;
case 67:
 this.$ = [['ORIENTATION'], ['LOAD', 3], ['EQ'], ['NOT']]; 
break;
case 68:
 
      this.$ = [[
        'VAR', 
        {
          target:$$[$0], 
          loc: _$[$0],
          couldBeFunction: false,          
          expectedType: 'INT'
        }
      ]]; 
    
break;
case 69:
 this.$ = [['LOAD', $$[$0]]]; 
break;
case 70:
 this.$ = $$[$0-1].concat([['INC', 1]]); 
break;
case 71:
 this.$ = $$[$0-1].concat([['DEC', 1]]); 
break;
case 72:
 this.$ = $$[$0-3].concat([['INC', $$[$0-1]]]); 
break;
case 73:
 this.$ = $$[$0-3].concat([['DEC', $$[$0-1]]]); 
break;
case 74:
 
      const callData = $$[$0];
      callData[callData.length-2][1].expectedType = 'INT'; //Set expected int to call instruction
      this.$ = [...callData, ['LRET']] 
    
break;
case 75:
 this.$ = parseInt(yytext); 
break;
case 76:
 this.$ = yytext; 
break;
case 77:
 this.$ = [['LINE', yylineno]]; 
break;
}
},
table: [{3:1,4:[1,2],13:3,15:4,16:$V0},{1:[3]},{5:[1,6]},{4:[1,7],15:8,16:$V0},o($V1,[2,7]),{17:9,19:[1,10]},{6:[1,11]},{5:[1,12]},o($V1,[2,6]),{18:[1,13]},{20:[1,14]},{5:[1,16],7:15,22:17,23:18,26:$V2,27:$V3,28:$V4},{6:[1,22]},o($V1,[2,8]),{19:[1,23],21:[1,24]},{5:[1,25],22:26,23:18,26:$V2,27:$V3,28:$V4},{8:[1,27]},o($V5,[2,12]),{19:$V6,24:28},{19:[2,15]},{19:[2,16]},{19:[2,17]},{5:[1,30],7:29,22:17,23:18,26:$V2,27:$V3,28:$V4},{18:[2,9]},{18:[2,10]},{8:[1,31]},o($V5,[2,11]),{9:[1,32]},{19:$V7,25:33},{5:[1,35],22:26,23:18,26:$V2,27:$V3,28:$V4},{8:[1,36]},{9:[1,37]},{6:$V8,10:38},{8:[1,40]},o([8,9,18,75],[2,76]),{8:[1,41]},{9:[1,42]},{6:$V8,10:43},{11:[1,44]},{6:$V8,10:57,14:45,18:$V9,19:$V7,25:60,29:46,30:$Va,31:$Vb,32:$Vc,33:$Vd,34:$Ve,35:52,36:53,37:54,38:55,39:56,40:$Vf,42:$Vg,45:$Vh,46:$Vi},{9:[1,64],19:$V7,25:65},{9:[1,66]},{6:$V8,10:67},{11:[1,68]},{12:[1,69]},{6:$V8,10:57,11:[1,70],18:$V9,19:$V7,25:60,29:71,30:$Va,31:$Vb,32:$Vc,33:$Vd,34:$Ve,35:52,36:53,37:54,38:55,39:56,40:$Vf,42:$Vg,45:$Vh,46:$Vi},o($Vj,[2,19]),{8:[1,72]},{8:[1,73]},{8:[1,74]},{8:[1,75]},{8:[1,76]},{18:[1,77]},{18:[1,78]},o($Vk,[2,27]),o($Vk,[2,28]),o($Vk,[2,29]),o($Vk,[2,30]),o($Vk,[2,31]),{8:[1,79],18:[2,33],19:$V7,25:81,36:85,41:80,72:82,73:$Vl,74:$Vm,76:$Vn},{8:$Vo},{8:$V6,24:88},{8:$V6,24:89},{8:$V6,24:90},{6:$V8,10:91},{9:[1,92]},{6:$V8,10:93},{11:[1,94]},{12:[1,95]},{1:[2,2]},o([5,6,11,18,19,26,27,28,30,31,32,33,34,40,42,44,45,46],[2,5]),o($Vj,[2,18]),{9:[1,96]},{9:[1,97]},{9:[1,98]},{9:[1,99]},{9:[1,100]},o($Vk,[2,25]),o($Vk,[2,26]),{9:[1,101]},{18:[2,34]},o($Vp,[2,68],{8:$Vo}),o($Vp,[2,69]),{8:[1,102]},{8:[1,103]},o($Vp,[2,74]),o($Vp,[2,75]),{9:[1,104],19:$V7,25:81,36:85,41:105,72:82,73:$Vl,74:$Vm,76:$Vn},{8:[1,106]},{8:[1,107]},{8:[1,108]},o($V5,[2,13]),{6:$V8,10:109},{11:[1,110]},{12:[1,111]},{1:[2,1]},{18:[1,112]},{18:[1,113]},{18:[1,114]},{18:[1,115]},{18:[1,116]},{18:[2,32]},{19:$V7,25:81,36:85,41:117,72:82,73:$Vl,74:$Vm,76:$Vn},{19:$V7,25:81,36:85,41:118,72:82,73:$Vl,74:$Vm,76:$Vn},o($Vp,[2,35]),{9:[1,119]},{8:$Vq,43:120,47:121,50:$Vr,51:124,52:$Vs,53:126,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK},{8:$Vq,43:145,47:121,50:$Vr,51:124,52:$Vs,53:126,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK},{19:$V7,25:81,36:85,41:146,72:82,73:$Vl,74:$Vm,76:$Vn},o($V5,[2,14]),{12:[1,147]},{1:[2,4]},o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),{9:[1,148],75:[1,149]},{9:[1,150],75:[1,151]},o($Vp,[2,36]),{9:[1,152]},{9:[2,46],48:$VL,49:$VM},{8:$Vq,47:155,50:$Vr,51:124,52:$Vs,53:126,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK},{8:$Vq,47:156,50:$Vr,51:124,52:$Vs,53:126,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK},o($VN,[2,45]),{8:[1,157]},o($VN,[2,48],{8:[1,158]}),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,54]),o($VO,[2,55]),o($VO,[2,56]),o($VO,[2,57]),o($VO,[2,58]),o($VO,[2,59]),o($VO,[2,60]),o($VO,[2,61]),o($VO,[2,62]),o($VO,[2,63]),o($VO,[2,64]),o($VO,[2,65]),o($VO,[2,66]),o($VO,[2,67]),{9:[1,159]},{9:[1,160]},{1:[2,3]},o($Vp,[2,70]),{72:161,76:$Vn},o($Vp,[2,71]),{72:162,76:$Vn},{6:$V8,10:57,18:$V9,19:$V7,25:60,29:163,30:$Va,31:$Vb,32:$Vc,33:$Vd,34:$Ve,35:52,36:53,37:54,38:55,39:56,40:$Vf,42:$Vg,45:$Vh,46:$Vi},{8:$Vq,47:164,50:$Vr,51:124,52:$Vs,53:126,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK},{8:$Vq,47:165,50:$Vr,51:124,52:$Vs,53:126,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK},o($VN,[2,43]),{9:[1,166],48:$VL,49:$VM},{19:$V7,25:81,36:85,41:167,72:82,73:$Vl,74:$Vm,76:$Vn},{9:[1,168]},{6:$V8,10:57,18:$V9,19:$V7,25:60,29:169,30:$Va,31:$Vb,32:$Vc,33:$Vd,34:$Ve,35:52,36:53,37:54,38:55,39:56,40:$Vf,42:$Vg,45:$Vh,46:$Vi},{6:$V8,10:57,18:$V9,19:$V7,25:60,29:170,30:$Va,31:$Vb,32:$Vc,33:$Vd,34:$Ve,35:52,36:53,37:54,38:55,39:56,40:$Vf,42:$Vg,45:$Vh,46:$Vi},{9:[1,171]},{9:[1,172]},o($Vj,[2,37],{44:[1,173]}),o([9,48],[2,41],{49:$VM}),o($VN,[2,42]),o($VN,[2,44]),{9:[1,174]},o($VN,[2,49]),o($Vk,[2,39]),o($Vk,[2,40]),o($Vp,[2,72]),o($Vp,[2,73]),{6:$V8,10:57,18:$V9,19:$V7,25:60,29:175,30:$Va,31:$Vb,32:$Vc,33:$Vd,34:$Ve,35:52,36:53,37:54,38:55,39:56,40:$Vf,42:$Vg,45:$Vh,46:$Vi},o($VN,[2,47]),o($Vk,[2,38])],
defaultActions: {19:[2,15],20:[2,16],21:[2,17],23:[2,9],24:[2,10],69:[2,2],80:[2,34],95:[2,1],101:[2,32],111:[2,4],147:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    // _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc, // Implement fix: https://github.com/zaach/jison/pull/356
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


const COMPILER= "RKJ 1.0.0";
const LANG = "ReKarel Java";
const VarsAsFuncs = false;
const reqsPrototypes = false;
//Tag counter
let tagCnt = 1;


function UniqueTag(tag) {
  return `${tag}.${tagCnt++}`;
}
function resetCompiler(tag) {
  tagCnt = 1;
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:/* ignore */
break;
case 2:/* ignore */
break;
case 3: return 4; 
break;
case 4: return 5; 
break;
case 5: return 26; 
break;
case 6: return 16; 
break;
case 7: return 26; 
break;
case 8: return 27; 
break;
case 9: return 28; 
break;
case 10: return 40; 
break;
case 11: return 34; 
break;
case 12: return 31; 
break;
case 13: return 30; 
break;
case 14: return 32; 
break;
case 15: return 33; 
break;
case 16: return 45; 
break;
case 17: return 46; 
break;
case 18: return 74; 
break;
case 19: return 73; 
break;
case 20: return 52; 
break;
case 21: return 54; 
break;
case 22: return 55; 
break;
case 23: return 56; 
break;
case 24: return 57; 
break;
case 25: return 58; 
break;
case 26: return 59; 
break;
case 27: return 60; 
break;
case 28: return 61; 
break;
case 29: return 62; 
break;
case 30: return 63; 
break;
case 31: return 65; 
break;
case 32: return 67; 
break;
case 33: return 66; 
break;
case 34: return 64; 
break;
case 35: return 69; 
break;
case 36: return 71; 
break;
case 37: return 70; 
break;
case 38: return 68; 
break;
case 39: return 44; 
break;
case 40: return 42; 
break;
case 41: return 50; 
break;
case 42: return 48; 
break;
case 43: return 49; 
break;
case 44: return 49; 
break;
case 45: return 8; 
break;
case 46: return 9; 
break;
case 47: return 6; 
break;
case 48: return 11; 
break;
case 49: return 18; 
break;
case 50: return 20; 
break;
case 51: return 21; 
break;
case 52: return 75; 
break;
case 53: return 76; 
break;
case 54: return 19; 
break;
case 55: return 12; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*(?:[^*]|\*(?!\/))*\*\/)/,/^(?:class\b)/,/^(?:program\b)/,/^(?:define\b)/,/^(?:import\b)/,/^(?:void\b)/,/^(?:int\b)/,/^(?:bool\b)/,/^(?:return\b)/,/^(?:turnoff\b)/,/^(?:turnleft\b)/,/^(?:move\b)/,/^(?:pickbeeper\b)/,/^(?:putbeeper\b)/,/^(?:while\b)/,/^(?:iterate\b)/,/^(?:pred\b)/,/^(?:succ\b)/,/^(?:iszero\b)/,/^(?:frontIsClear\b)/,/^(?:frontIsBlocked\b)/,/^(?:leftIsClear\b)/,/^(?:leftIsBlocked\b)/,/^(?:rightIsClear\b)/,/^(?:rightIsBlocked\b)/,/^(?:nextToABeeper\b)/,/^(?:notNextToABeeper\b)/,/^(?:anyBeepersInBeeperBag\b)/,/^(?:noBeepersInBeeperBag\b)/,/^(?:facingNorth\b)/,/^(?:facingSouth\b)/,/^(?:facingEast\b)/,/^(?:facingWest\b)/,/^(?:notFacingNorth\b)/,/^(?:notFacingSouth\b)/,/^(?:notFacingEast\b)/,/^(?:notFacingWest\b)/,/^(?:else\b)/,/^(?:if\b)/,/^(?:!)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?:\.)/,/^(?:\*)/,/^(?:,)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
function javaParser() {
    return kareljava.parse.apply(kareljava, arguments);
}
export {kareljava, javaParser }
